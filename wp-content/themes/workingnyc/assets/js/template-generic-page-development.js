(function () {
  'use strict';

  /**
   * Template Name: Generic Page
   *
   * @author NYC Opportunity
   */

  /**
   * Dependencies
   */

  // import ... from ...

  /**
   * Init
   */

  /**
   * Method for toggling the jump navigation item, used by the click event
   * handler and the intersection observer event handler.
   *
   * @var NodeElement
   */
    const jumpClassToggle = item => {
    for (let i = 0; i < item.parentNode.children.length; i++) {
      const sibling = item.parentNode.children[i];

      if (sibling.classList.contains('no-underline'))
        sibling.classList.remove('no-underline', 'text-alt');
    }

    item.classList.add('no-underline', 'text-alt');
  };

  /**
   * Click event handler for jump navigation items
   *
   * @var NodeElement
   */
  (element => {
    if (element) {
      let activeNavigation = element.querySelectorAll('a[href]');

      for (let i = 0; i < activeNavigation.length; i++) {
        const a = activeNavigation[i];

        a.addEventListener('click', event => {
          setTimeout(() => {
            jumpClassToggle(event.target);
          }, 200);
        });
      }
    }
  })(document.querySelector('[data-js*="active-navigation"]'));

  /**
   * Intersection Observer event handler for jump navigation items
   *
   * @var NodeElementList
   */
  (elements => {
    elements.forEach(element => {
      new Observe({
        element: element,
        trigger: (entry) => {
          if (!entry.isIntersecting) return;

          let jumpItem = document.querySelector(`a[href="#${entry.target.id}"]`);

          if (!jumpItem) return;

          jumpItem.closest('[data-js*="active-navigation-scroll"]').scrollTo({
            left: jumpItem.offsetLeft,
            top: 0,
            behavior: 'smooth'
          });

          jumpClassToggle(jumpItem);
        }
      });
    });
  })(document.querySelectorAll(Observe.selector));

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUtZ2VuZXJpYy1wYWdlLWRldmVsb3BtZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvanMvdGVtcGxhdGUtZ2VuZXJpYy1wYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVtcGxhdGUgTmFtZTogR2VuZXJpYyBQYWdlXG4gKlxuICogQGF1dGhvciBOWUMgT3Bwb3J0dW5pdHlcbiAqL1xuXG4vKipcbiAqIERlcGVuZGVuY2llc1xuICovXG5cbi8vIGltcG9ydCAuLi4gZnJvbSAuLi5cblxuLyoqXG4gKiBJbml0XG4gKi9cblxuLyoqXG4gKiBNZXRob2QgZm9yIHRvZ2dsaW5nIHRoZSBqdW1wIG5hdmlnYXRpb24gaXRlbSwgdXNlZCBieSB0aGUgY2xpY2sgZXZlbnRcbiAqIGhhbmRsZXIgYW5kIHRoZSBpbnRlcnNlY3Rpb24gb2JzZXJ2ZXIgZXZlbnQgaGFuZGxlci5cbiAqXG4gKiBAdmFyIE5vZGVFbGVtZW50XG4gKi9cbiAgY29uc3QganVtcENsYXNzVG9nZ2xlID0gaXRlbSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbS5wYXJlbnROb2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2libGluZyA9IGl0ZW0ucGFyZW50Tm9kZS5jaGlsZHJlbltpXTtcblxuICAgIGlmIChzaWJsaW5nLmNsYXNzTGlzdC5jb250YWlucygnbm8tdW5kZXJsaW5lJykpXG4gICAgICBzaWJsaW5nLmNsYXNzTGlzdC5yZW1vdmUoJ25vLXVuZGVybGluZScsICd0ZXh0LWFsdCcpO1xuICB9XG5cbiAgaXRlbS5jbGFzc0xpc3QuYWRkKCduby11bmRlcmxpbmUnLCAndGV4dC1hbHQnKTtcbn07XG5cbi8qKlxuICogQ2xpY2sgZXZlbnQgaGFuZGxlciBmb3IganVtcCBuYXZpZ2F0aW9uIGl0ZW1zXG4gKlxuICogQHZhciBOb2RlRWxlbWVudFxuICovXG4oZWxlbWVudCA9PiB7XG4gIGlmIChlbGVtZW50KSB7XG4gICAgbGV0IGFjdGl2ZU5hdmlnYXRpb24gPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2FbaHJlZl0nKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWN0aXZlTmF2aWdhdGlvbi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYSA9IGFjdGl2ZU5hdmlnYXRpb25baV07XG5cbiAgICAgIGEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGp1bXBDbGFzc1RvZ2dsZShldmVudC50YXJnZXQpO1xuICAgICAgICB9LCAyMDApO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1qcyo9XCJhY3RpdmUtbmF2aWdhdGlvblwiXScpKTtcblxuLyoqXG4gKiBJbnRlcnNlY3Rpb24gT2JzZXJ2ZXIgZXZlbnQgaGFuZGxlciBmb3IganVtcCBuYXZpZ2F0aW9uIGl0ZW1zXG4gKlxuICogQHZhciBOb2RlRWxlbWVudExpc3RcbiAqL1xuKGVsZW1lbnRzID0+IHtcbiAgZWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICBuZXcgT2JzZXJ2ZSh7XG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgdHJpZ2dlcjogKGVudHJ5KSA9PiB7XG4gICAgICAgIGlmICghZW50cnkuaXNJbnRlcnNlY3RpbmcpIHJldHVybjtcblxuICAgICAgICBsZXQganVtcEl0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBhW2hyZWY9XCIjJHtlbnRyeS50YXJnZXQuaWR9XCJdYCk7XG5cbiAgICAgICAgaWYgKCFqdW1wSXRlbSkgcmV0dXJuO1xuXG4gICAgICAgIGp1bXBJdGVtLmNsb3Nlc3QoJ1tkYXRhLWpzKj1cImFjdGl2ZS1uYXZpZ2F0aW9uLXNjcm9sbFwiXScpLnNjcm9sbFRvKHtcbiAgICAgICAgICBsZWZ0OiBqdW1wSXRlbS5vZmZzZXRMZWZ0LFxuICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgICAgfSk7XG5cbiAgICAgICAganVtcENsYXNzVG9nZ2xlKGp1bXBJdGVtKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59KShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKE9ic2VydmUuc2VsZWN0b3IpKTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7RUFBQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0FBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFDQTtFQUNBO0FBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLEVBQUUsTUFBTSxlQUFlLEdBQUcsSUFBSSxJQUFJO0VBQ2xDLEVBQUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtFQUM1RCxJQUFJLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hEO0VBQ0EsSUFBSSxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQztFQUNsRCxNQUFNLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztFQUMzRCxHQUFHO0FBQ0g7RUFDQSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztFQUNqRCxDQUFDLENBQUM7QUFDRjtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxDQUFDLE9BQU8sSUFBSTtFQUNaLEVBQUUsSUFBSSxPQUFPLEVBQUU7RUFDZixJQUFJLElBQUksZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9EO0VBQ0EsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0VBQ3RELE1BQU0sTUFBTSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEM7RUFDQSxNQUFNLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsS0FBSyxJQUFJO0VBQzNDLFFBQVEsVUFBVSxDQUFDLE1BQU07RUFDekIsVUFBVSxlQUFlLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0VBQ3hDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUNoQixPQUFPLENBQUMsQ0FBQztFQUNULEtBQUs7RUFDTCxHQUFHO0VBQ0gsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDO0FBQzdEO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLENBQUMsUUFBUSxJQUFJO0VBQ2IsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSTtFQUM5QixJQUFJLElBQUksT0FBTyxDQUFDO0VBQ2hCLE1BQU0sT0FBTyxFQUFFLE9BQU87RUFDdEIsTUFBTSxPQUFPLEVBQUUsQ0FBQyxLQUFLLEtBQUs7RUFDMUIsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxPQUFPO0FBQzFDO0VBQ0EsUUFBUSxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDL0U7RUFDQSxRQUFRLElBQUksQ0FBQyxRQUFRLEVBQUUsT0FBTztBQUM5QjtFQUNBLFFBQVEsUUFBUSxDQUFDLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztFQUMzRSxVQUFVLElBQUksRUFBRSxRQUFRLENBQUMsVUFBVTtFQUNuQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0VBQ2hCLFVBQVUsUUFBUSxFQUFFLFFBQVE7RUFDNUIsU0FBUyxDQUFDLENBQUM7QUFDWDtFQUNBLFFBQVEsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0VBQ2xDLE9BQU87RUFDUCxLQUFLLENBQUMsQ0FBQztFQUNQLEdBQUcsQ0FBQyxDQUFDO0VBQ0wsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7Ozs7OzsifQ==
